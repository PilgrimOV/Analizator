#!/bin/bash
# –ü–æ–∏—Å–∫ —É—Ç–∏–ª–∏—Ç –∏–∑ Homebrew/MacPorts
export PATH="/usr/local/bin:/opt/homebrew/bin:/opt/local/bin:$PATH"
shopt -s nullglob

# –ï—Å–ª–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–µ—ë (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
if [ -n "$1" ]; then
  cd "$1" || exit 1
fi

# –£–¥–∞–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
rm -f error.log

process_file() {
    file="$1"
    echo "üîçüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: $file"
    
    # –ò—Å—Ö–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    original_rate=$(ffprobe -v error -select_streams a -show_entries stream=sample_rate \
                     -of default=noprint_wrappers=1:nokey=1 "$file")
    [ -z "$original_rate" ] && original_rate=44100
    
    # –ê–Ω–∞–ª–∏–∑ (–æ–¥–Ω–æ–ø—Ä–æ—Ö–æ–¥) –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    analysis=$(ffmpeg -hide_banner -i "$file" -af loudnorm=print_format=summary -f null - 2>&1)
    input_lufs=$(echo "$analysis" | grep "Input Integrated" | awk '{print $3}')
    input_tp=$(echo "$analysis" | grep "Input True Peak" | awk '{print $4}' | sed 's/^\+//')
    
    # –ë–∏—Ç—Ä–µ–π—Ç
    if [[ "$file" == *.m4a ]]; then
        bitrate="320k"
    else
        bitrate=$(ffprobe -v error -select_streams a -show_entries stream=bit_rate \
                 -of default=noprint_wrappers=1:nokey=1 "$file")
        [ -z "$bitrate" ] && bitrate="320k"
    fi
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º MP3, –µ—Å–ª–∏ —É–∂–µ –≤ –Ω–æ—Ä–º–µ
    if [[ "$file" == *.mp3 ]] && (( $(echo "$input_lufs >= -15" | bc -l) )) && \
       (( $(echo "$input_lufs <= -13.5" | bc -l) )) && (( $(echo "$input_tp <= 0.0" | bc -l) )); then
        echo "‚úÖ‚úÖ MP3 —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞–º. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: $file"
        return
    fi
    
    # –ï—Å–ª–∏ M4A –≤ –Ω–æ—Ä–º–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–¥–∏—Ä—É–µ–º –≤ MP3 320 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
    if [[ "$file" == *.m4a ]] && (( $(echo "$input_lufs >= -15" | bc -l) )) && \
       (( $(echo "$input_lufs <= -13.5" | bc -l) )) && (( $(echo "$input_tp <= -0.4" | bc -l) )); then
        echo "‚úÖ M4A —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞–º, –∫–æ–¥–∏—Ä—É–µ–º –≤ MP3 320 CBR –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π."
        filter="volume=0dB"
    else
        # === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –§–ò–õ–¨–¢–†–ê ===
        # –¶–µ–ª—å 1: -14 LUFS
        adj_14=$(echo "scale=3; -14 - ($input_lufs)" | bc -l)
        predTP_14=$(echo "scale=3; $input_tp + $adj_14" | bc -l)
        
        # --- NEW (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ): TP-—Ñ–∏–∫—Å –≤–Ω–∏–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏—Ö–∏—Ö/–æ–∫–æ–ª–æ—Ç–∞—Ä–≥–µ—Ç–Ω—ã—Ö (adj_14 > 0) ---
tp_fix="-0.4"  # –æ–±—â–∏–π TP-–ø–æ—Ä–æ–≥
if (( $(echo "$adj_14 > 0" | bc -l) )) && (( $(echo "$input_tp > $tp_fix" | bc -l) )); then
    # –°–∫–æ–ª—å–∫–æ dB –Ω—É–∂–Ω–æ –£–ú–ï–ù–¨–®–ò–¢–¨, —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ TP-–ø–æ—Ä–æ–≥ (–ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
    g_down=$(echo "scale=3; $tp_fix - ($input_tp)" | bc -l)
    I_after_down=$(echo "scale=3; $input_lufs + $g_down" | bc -l)

    if (( $(echo "$I_after_down >= -15.5" | bc -l) )); then
        echo "üü° TP –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ TP>${tp_fix} dBTP ‚Üí –ª–∏–Ω–µ–π–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ ${g_down} dB ‚Üí ‚âà ${I_after_down} LUFS, TP ‚âà ${tp_fix} dBTP."
        filter="volume=${g_down}dB"
    fi
fi
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –≥—Ä–æ–º—á–µ —Ü–µ–ª–∏ (-14) ‚Äî –ø–æ–Ω–∏–∂–∞–µ–º –ª–∏–Ω–µ–π–Ω–æ —Å —É—á—ë—Ç–æ–º TP-–ø–æ—Ä–æ–≥–∞
        if [ -z "$filter" ]; then
if (( $(echo "$adj_14 <= 0" | bc -l) )); then
    tp_thresh="-0.4"
    predTP_after_down14=$(echo "scale=3; $input_tp + $adj_14" | bc -l)

    if (( $(echo "$predTP_after_down14 > $tp_thresh" | bc -l) )); then
        # –°–∫–æ–ª—å–∫–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ TP-–ø–æ—Ä–æ–≥
        extra_down=$(echo "scale=3; $predTP_after_down14 - ($tp_thresh)" | bc -l)
        new_adj=$(echo "scale=3; $adj_14 - $extra_down" | bc -l)
        echo "üü° –°–Ω–∏–∑–∏—Ç—å –¥–æ -14 LUFS –Ω–µ–ª—å–∑—è (–ø—Ä–æ–≥–Ω–æ–∑ $predTP_after_down14 dBTP) ‚Äî —Å–Ω–∏–∂–∞–µ–º –µ—â—ë –Ω–∞ $extra_down dB; –∏—Ç–æ–≥–æ–≤–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ $new_adj dB."
        filter="volume=${new_adj}dB"
    else
        echo "‚úÖ –°–Ω–∏–∑–∏–ª–∏ –¥–æ -14 LUFS (${adj_14} dB), TP –ø–æ—Å–ª–µ = ${predTP_after_down14} dBTP."
        filter="volume=${adj_14}dB"
    fi

                # –§–∞–π–ª —Ç–∏—Ö–∏–π: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–Ω—è—Ç—å –ª–∏–Ω–µ–π–Ω–æ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ, –Ω–µ –Ω–∞—Ä—É—à–∞—è TP, –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ [-15.5; -14] LUFS)
        else
            tp_thresh="-0.4"  # —Ç–≤–æ–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–¥—ä—ë–º–∞

            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–¥—ä—ë–º –ø–æ TP: input_tp + g <= tp_thresh
            gTPmax=$(echo "scale=3; $tp_thresh - ($input_tp)" | bc -l)

            if (( $(echo "$gTPmax <= 0" | bc -l) )); then
                # –í–æ–æ–±—â–µ –Ω–µ–ª—å–∑—è –ø–æ–¥–Ω–∏–º–∞—Ç—å –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è TP ‚Üí –¥–≤—É—Ö–ø—Ä–æ—Ö–æ–¥–Ω—ã–π loudnorm
                echo "‚ö†Ô∏è –ü–æ–¥–Ω–∏–º–∞—Ç—å –ª–∏–Ω–µ–π–Ω–æ –Ω–µ–ª—å–∑—è (gTPmax=${gTPmax} dB, TP-–ø–æ—Ä–æ–≥ ${tp_thresh} dBTP). –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤—É—Ö–ø—Ä–æ—Ö–æ–¥–Ω—ã–π loudnorm."
                json=$(ffmpeg -hide_banner -i "$file" -af "loudnorm=i=-15:lra=12:tp=-0.7:print_format=json" -f null - 2>&1)
                measured_I=$(echo "$json" | awk -F'\"' '/\"input_i\"/ {print $4}')
                measured_TP=$(echo "$json" | awk -F'\"' '/\"input_tp\"/ {print $4}')
                measured_LRA=$(echo "$json" | awk -F'\"' '/\"input_lra\"/ {print $4}')
                measured_thresh=$(echo "$json" | awk -F'\"' '/\"input_thresh\"/ {print $4}')
                offset=$(echo "$json" | awk -F'\"' '/\"target_offset\"/ {print $4}')
                filter="loudnorm=i=-15:lra=12:tp=-0.7:measured_I=${measured_I}:measured_TP=${measured_TP}:measured_LRA=${measured_LRA}:measured_thresh=${measured_thresh}:offset=${offset}:linear=true:print_format=summary"
            else
                # g_lin = min(adj_14, gTPmax)
                # (adj_14 —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–Ω –≤—ã—à–µ –∫–∞–∫ -14 - input_lufs)
                if (( $(echo "$adj_14 <= $gTPmax" | bc -l) )); then
                    g_lin="$adj_14"
                else
                    g_lin="$gTPmax"
                fi

                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –∏—Ç–æ–≥ –ø–æ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø—Ä–∏ —Ç–∞–∫–æ–º –ª–∏–Ω–µ–π–Ω–æ–º –ø–æ–¥—ä—ë–º–µ
                I_lin=$(echo "scale=3; $input_lufs + $g_lin" | bc -l)
                TP_lin=$(echo "scale=3; $input_tp + $g_lin" | bc -l)

                # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–¥—ä—ë–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ–º —Ö–æ—Ç—è –±—ã –≤ -15.5 LUFS
                if (( $(echo "$I_lin >= -15.5" | bc -l) )); then
                    echo "‚úÖ –ü–æ–¥–Ω—è–ª–∏ –Ω–∞ ${g_lin} dB: —Ü–µ–ª–µ–≤–æ–π ‚âà ${I_lin} LUFS (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ -14), TP –ø–æ—Å–ª–µ ‚âà ${TP_lin} dBTP."
                    filter="volume=${g_lin}dB"
                else
                    echo "‚ö†Ô∏è –î–∞–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ TP –ø–æ–¥—ä—ë–º –¥–∞—ë—Ç –ª–∏—à—å ${I_lin} LUFS (< -15.5). –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤—É—Ö–ø—Ä–æ—Ö–æ–¥–Ω—ã–π loudnorm."
                    json=$(ffmpeg -hide_banner -i "$file" -af "loudnorm=i=-15:lra=12:tp=-0.7:print_format=json" -f null - 2>&1)
                    measured_I=$(echo "$json" | awk -F'\"' '/\"input_i\"/ {print $4}')
                    measured_TP=$(echo "$json" | awk -F'\"' '/\"input_tp\"/ {print $4}')
                    measured_LRA=$(echo "$json" | awk -F'\"' '/\"input_lra\"/ {print $4}')
                    measured_thresh=$(echo "$json" | awk -F'\"' '/\"input_thresh\"/ {print $4}')
                    offset=$(echo "$json" | awk -F'\"' '/\"target_offset\"/ {print $4}')
                    filter="loudnorm=i=-15:lra=12:tp=-0.7:measured_I=${measured_I}:measured_TP=${measured_TP}:measured_LRA=${measured_LRA}:measured_thresh=${measured_thresh}:offset=${offset}:linear=true:print_format=summary"
                fi
            fi
        fi
    fi

        # === –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ===
    fi

    # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_file="${file%.*}_New.mp3"
    if [ -e "$output_file" ]; then
        output_file="${file%.*}_New1.mp3"
    fi

    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ MP3
    ffmpeg -y -hide_banner -i "$file" \
      -af "$filter" \
      -c:a libmp3lame -b:a "$bitrate" \
      -ar "$original_rate" \
      -write_xing 0 -id3v2_version 3 \
      -map_metadata 0 \
      "$output_file"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if [ ! -f "$output_file" ]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: $output_file" >&2
        echo "$file" >> error.log
    else
        echo "üóÇÔ∏èüóÇÔ∏è –°–û–ó–î–ê–ù –ù–û–í–´–ô –§–ê–ô–õ: $output_file"
    fi
}

export -f process_file

# –ë–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º *.mp3 –∏ *.m4a
parallel -j16 --bar --eta -k process_file ::: *.mp3 *.m4a

# –ò—Ç–æ–≥
if [ -s error.log ]; then
    echo "‚ùå‚ùå‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –≠—Ç–∏ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å:"
    cat error.log
else
    echo "‚úÖ‚úÖ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
fi
