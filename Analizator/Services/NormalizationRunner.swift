//
//  NormalizationRunner.swift
//  Analizator
//
//  Created by –í–∏–∫—Ç–æ—Ä –û–±—É—Ö–æ–≤ on 07.08.2025.
//

import Foundation

// MARK: - –°–µ—Ä–≤–∏—Å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
class NormalizationRunner {
    @Published var results: [NormalizationResult] = []
    
    // MARK: - –ó–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    static func run(selectedRootFolder: URL?, 
                   lastNormalizationRoot: URL?,
                   selectedFiles: [URL],
                   onLogUpdate: @escaping (String) -> Void,
                   onProgressUpdate: @escaping (URL?, Set<URL>, Int, Int) -> Void,
                   onCompletion: @escaping () -> Void) -> Process? {
        
        guard let scriptPath = Bundle.main.path(forResource: "Normal", ofType: "sh") else {
            onLogUpdate("‚ùå –°–∫—Ä–∏–ø—Ç Normal.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–Ω–¥–ª–µ.")
            onCompletion()
            return nil
        }
        
        try? FileManager.default.setAttributes([.posixPermissions: 0o755], ofItemAtPath: scriptPath)
        
        guard let workDir = (selectedRootFolder ?? lastNormalizationRoot ?? selectedFiles.first?.deletingLastPathComponent()) else {
            onLogUpdate("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏.")
            onCompletion()
            return nil
        }
        
        let p = Process()
        p.currentDirectoryPath = workDir.path
        p.launchPath = "/bin/bash"
        p.arguments = [scriptPath, workDir.path]
        
        let pipe = Pipe()
        p.standardOutput = pipe
        p.standardError = pipe
        var lineRemainder = ""   // –ª–æ–∫–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≠–¢–û–ì–û –∑–∞–ø—É—Å–∫–∞
        
        // –ñ–∏–≤–æ–π –ª–æ–≥: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç –º—É—Å–æ—Ä–∞ + —Ç—Ä–µ–∫–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        pipe.fileHandleForReading.readabilityHandler = { handle in
            let data = handle.availableData
            guard !data.isEmpty else { return }

            // —Å—Ç—Ä–æ–∫–∞-–∫—É—Å–æ–∫ –∏–∑ –ø–∞–π–ø–∞
            var chunk = String(data: data, encoding: .utf8) ?? ""

            // 1) —á–∏—Å—Ç–∏–º ANSI
            chunk = chunk.replacingOccurrences(of: #"\u001B\[[0-9;]*m"#,
                                               with: "", options: .regularExpression)
            chunk = chunk.replacingOccurrences(of: "\r", with: "")
            
            // 2) –¥–æ–±–∞–≤–ª—è–µ–º ¬´—Ö–≤–æ—Å—Ç¬ª –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —á—Ç–µ–Ω–∏—è –∏ —Ä–µ–∂–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            chunk = lineRemainder + chunk
            var lines = chunk.split(separator: "\n", omittingEmptySubsequences: false).map(String.init)

            // –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ \n ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ö–≤–æ—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
            if let last = lines.last, !chunk.hasSuffix("\n") {
                lineRemainder = last
                lines.removeLast()
            } else {
                lineRemainder = ""
            }

            // 3) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¶–ï–õ–´–ï —Å—Ç—Ä–æ–∫–∏
            let fullText = lines.joined(separator: "\n")
            if fullText.isEmpty { return }

            let filtered = filterNormalizationChunk(fullText)
            if filtered.isEmpty { return }

            // —Å—Ç—Ä–æ–≥–æ–µ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ: –æ–¥–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å + sync –Ω–∞ Main
            DispatchQueue.main.async {
                let numbered = addSectionNumbers(to: filtered)
                onLogUpdate(numbered + "\n")
                trackNormalizationProgress(from: numbered, workDir: workDir, onProgressUpdate: onProgressUpdate)
            }
        }
        
        p.terminationHandler = { _ in
            // 1) –ø–µ—Ä–µ—Å—Ç–∞—ë–º —á–∏—Ç–∞—Ç—å –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏
            pipe.fileHandleForReading.readabilityHandler = nil

            // 2) –¥–æ—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—Ü –ø–∞–π–ø–∞
            let restData = pipe.fileHandleForReading.readDataToEndOfFile()
            let restStr = String(data: restData, encoding: .utf8) ?? ""

            // 3) –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–µ–¥–æ—á–∏—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–µ—Å–ª–∏ –±—ã–ª–∞)
            var tail = lineRemainder + restStr
            lineRemainder = ""

            // 4) —á–∏—Å—Ç–∏–º ANSI –∏ —Ä–µ–∂–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ü–µ–ª—ã–µ —Å—Ç—Ä–æ–∫–∏
            tail = tail.replacingOccurrences(of: #"\u001B\[[0-9;]*m"#, with: "", options: .regularExpression)
            tail = tail.replacingOccurrences(of: "\r", with: "")
            var lines = tail.split(separator: "\n", omittingEmptySubsequences: false).map(String.init)
            if let last = lines.last, !tail.hasSuffix("\n") {
                // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è, –Ω–æ –Ω–µ —Ç–µ—Ä—è–µ–º
                lineRemainder = last
                lines.removeLast()
            }
            let tailText = lines.joined(separator: "\n")

            DispatchQueue.main.async {
                if !tailText.isEmpty {
                    let filtered = filterNormalizationChunk(tailText)
                    if !filtered.isEmpty {
                        let numberedTail = addSectionNumbers(to: filtered)
                        onLogUpdate(numberedTail + "\n")
                    }
                }

                // 5) —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ò–¢–û–ì ‚Äî —Å—Ç—Ä–æ–≥–æ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —Å –æ—Ç—Å—Ç—É–ø–æ–º
                onLogUpdate("\n–ò–¢–û–ì: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
                onCompletion()
            }
        }

        do { 
            try p.run()
            return p
        } catch {
            onLogUpdate("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: \(error.localizedDescription)")
            onCompletion()
            return nil
        }
    }
    
    // MARK: - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    static func stop(_ process: Process?) {
        process?.interrupt()   // SIGINT
        process?.terminate()   // SIGTERM
    }
    
    // MARK: - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∞
    static func filterNormalizationChunk(_ chunk: String) -> String {
        // —É–±–∏—Ä–∞–µ–º ANSI-–∫–æ–¥—ã
        let stripped = chunk.replacingOccurrences(
            of: #"\u001B\[[0-9;]*m"#,
            with: "",
            options: .regularExpression
        )

        let keepEmojiPrefixes = ["‚úÖ","‚ö†Ô∏è","‚ùå","üéµ","üîç","üü°","üóÇÔ∏è","üì¶"]
        let keepContains = [
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        ]

        let lines = stripped
            .split(separator: "\n")
            .map { String($0).trimmingCharacters(in: .whitespaces) }
            .compactMap { line -> String? in
                guard !line.isEmpty else { return nil }

                if keepEmojiPrefixes.contains(where: { line.hasPrefix($0) }) { return line }
                // "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞" –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏/–Ω–æ–º–µ—Ä–∞ ‚Äî –ª–æ–≤–∏–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é, –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                // –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±–æ–π –ø—Ä–µ—Ñ–∏–∫—Å (–º—É—Å–æ—Ä/–ø—Ä–æ—Ü–µ–Ω—Ç—ã/—Å–∏–º–≤–æ–ª—ã), –æ—Ç—Ä–µ–∑–∞–µ–º –≤—Å—ë —Å–ª–µ–≤–∞ –¥–æ –º–∞—Ä–∫–µ—Ä–∞
                if let r = line.range(of: #"–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞\s*:\s*"#, options: [.regularExpression, .caseInsensitive]) {
                    let filePart = line[r.upperBound...].trimmingCharacters(in: .whitespaces)
                    // –°–æ—Ö—Ä–∞–Ω–∏–º –∏—Å—Ö–æ–¥–Ω—É—é –ª—É–ø—É, –µ—Å–ª–∏ –±—ã–ª–∞; –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–∏–º üîç
                    let lens = line.contains("üîé") ? "üîé" : (line.contains("üîç") ? "üîç" : "üîç")
                    return "\(lens) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: \(filePart)"
                }
                if keepContains.contains(where: { line.contains($0) }) { return line }

                return nil
            }

        return lines.joined(separator: "\n")
    }
    
    // MARK: - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–µ–∫—Ü–∏–π
    static func addSectionNumbers(to text: String) -> String {
        let lines = text.split(separator: "\n", omittingEmptySubsequences: false).map(String.init)
        var out: [String] = []
        var sectionIndex = 0

        for raw in lines {
            // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥—É–±–ª–µ–π
            if raw.isEmpty {
                if out.last?.isEmpty != true { out.append("") }
                continue
            }

            let line = raw.trimmingCharacters(in: .whitespaces)

            // —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ—Ç–¥–µ–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å–≤–µ—Ä—Ö—É
            if line.localizedCaseInsensitiveContains("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                || line.localizedCaseInsensitiveContains("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏") {
                if out.last?.isEmpty != true { out.append("") }
                out.append(line)
                continue
            }

            // –±–ª–æ–∫–∏ ¬´–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ‚Ä¶¬ª ‚Äî –Ω—É–º–µ—Ä–∞—Ü–∏—è + —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if line.localizedCaseInsensitiveContains("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞") {
                sectionIndex += 1
                if sectionIndex > 1, out.last?.isEmpty != true {
                    out.append("") // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ —Ñ–∞–π–ª–æ–≤
                }
                out.append("\(sectionIndex) ‚Äî \(line)")
            } else {
                out.append(line)
            }
        }

        return out.joined(separator: "\n")
    }
    
    // MARK: - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    static func trackNormalizationProgress(from chunk: String, 
                                        workDir: URL, 
                                        onProgressUpdate: @escaping (URL?, Set<URL>, Int, Int) -> Void) {
        let lines = chunk.split(separator: "\n").map(String.init)
        var currentFile: URL?
        var normalizedFiles: Set<URL> = []
        var createdCount = 0
        
        for line in lines {
            if let path = extractPath(after: "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:", from: line) {
                let url = resolveLogPath(path, relativeTo: workDir)
                currentFile = url
            } else if line.localizedCaseInsensitiveContains("—Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
                     || line.localizedCaseInsensitiveContains("–ø—Ä–æ–ø—É—Å–∫–∞–µ–º:")
                     || line.contains("‚úÖ") {
                if let cur = currentFile { 
                    normalizedFiles.insert(cur) 
                }
                if line.localizedCaseInsensitiveContains("—Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª") {
                    createdCount += 1
                }
            }
        }
        
        onProgressUpdate(currentFile, normalizedFiles, 0, createdCount)
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private static func extractPath(after marker: String, from line: String) -> String? {
        guard let r = line.range(of: marker) else { return nil }
        var s = line[r.upperBound...].trimmingCharacters(in: .whitespaces)
        s = s.trimmingCharacters(in: CharacterSet(charactersIn: "¬´¬ª\"'"))
        return String(s)
    }
    
    private static func resolveLogPath(_ text: String, relativeTo root: URL) -> URL {
        if text.hasPrefix("/") { return URL(fileURLWithPath: text) }
        var t = text
        if t.hasPrefix("./") { t.removeFirst(2) }
        return root.appendingPathComponent(t)
    }
}

private func parseResultLine(_ line: String) -> NormalizationResult? {
    guard line.hasPrefix("###RESULT") else { return nil }

    func extract(_ key: String) -> String {
        if let range = line.range(of: "\(key)=\"") {
            let start = line[range.upperBound...]
            if let end = start.firstIndex(of: "\"") {
                return String(start[..<end])
            }
        }
        return "?"
    }

    let file = extract("file")
    let method = extract("method")
    let lufs = extract("lufs")
    let tp = extract("tp")
    let status = extract("status")

    return NormalizationResult(file: file, method: method, lufs: lufs, tp: tp, status: status)
}
